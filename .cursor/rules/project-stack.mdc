---
description:
globs:
alwaysApply: true
---
# Project Stack Rules

## TanStack Router

### 1. Route Structure
```typescript
// src/routes/__root.tsx
import { createRootRoute } from '@tanstack/react-router'

export const Route = createRootRoute({
  component: Root,
  beforeLoad: async () => {
    // Load data
    return { data }
  },
  errorComponent: ErrorBoundary,
})

// src/routes/some-route.tsx
import { createFileRoute } from '@tanstack/react-router'

export const Route = createFileRoute('/some-route')({
  component: SomeRoute,
  loader: async () => {
    // Load data
    return { data }
  },
})
```

### 2. Navigation
```typescript
import { Link } from '@tanstack/react-router'

export const Navigation = () => {
  return (
    <Link
      to="/some-route"
      activeProps={{
        className: 'font-bold',
      }}
    >
      Some Route
    </Link>
  )
}
```

### 3. Data Loading
```typescript
import { useLoaderData } from '@tanstack/react-router'

export const SomeRoute = () => {
  const { data } = Route.useLoaderData()
  return <div>{data}</div>
}
```

## shadcn/ui Components

### 1. Adding Components
```bash
# Add a new component
npx shadcn-ui@latest add button
npx shadcn-ui@latest add card
npx shadcn-ui@latest add dialog
```

### 2. Component Structure
```typescript
// src/components/ui/button.tsx
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"
import { cn } from "~/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground shadow hover:bg-primary/90",
        destructive: "bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90",
        outline: "border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground",
        secondary: "bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2",
        sm: "h-8 rounded-md px-3 text-xs",
        lg: "h-10 rounded-md px-8",
        icon: "h-9 w-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }
```

### 3. Component Usage
```typescript
import { Button } from "~/components/ui/button"

export const MyComponent = () => {
  return (
    <Button variant="default" size="lg">
      Click me
    </Button>
  )
}
```

## Best Practices

1. **TanStack Router**
   - Use `createRootRoute` for the root route
   - Use `createFileRoute` for all other routes
   - Keep route files in the `src/routes` directory
   - Use `useLoaderData` for accessing route data
   - Use `Link` component for navigation
   - Handle errors with `errorComponent`

2. **shadcn/ui**
   - Always add components using the CLI
   - Keep components in `src/components/ui`
   - Follow the component structure pattern
   - Use the provided variants and styles
   - Maintain consistent naming conventions
   - Use the `cn` utility for class merging

3. **Project Structure**
   - Keep routes in `src/routes`
   - Keep components in `src/components`
   - Keep utilities in `src/lib`
   - Keep hooks in `src/hooks`
   - Keep types in `src/types`
   - Keep styles in `src/styles`

---

**For more details, see:**
- [TanStack Router Documentation](mdc:https:/tanstack.com/router)
- [shadcn/ui Documentation](mdc:https:/ui.shadcn.com)
- [TanStack Start Documentation](mdc:https:/tanstack.com/start)
