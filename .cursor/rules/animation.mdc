---
description: 
globs: 
alwaysApply: true
---
# Animation Rules

## Component Animations

### 1. Basic Animations
```typescript
// src/components/ui/animated-card.tsx
import { motion } from 'framer-motion'

export const AnimatedCard = ({ children }: { children: React.ReactNode }) => {
  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      exit={{ opacity: 0, y: -20 }}
      transition={{ duration: 0.3 }}
    >
      {children}
    </motion.div>
  )
}
```

### 2. Number Draw Animation
```typescript
// src/components/game/number-draw.tsx
import { motion, AnimatePresence } from 'framer-motion'

export const NumberDraw = ({ number }: { number: number }) => {
  return (
    <AnimatePresence mode="wait">
      <motion.div
        key={number}
        initial={{ scale: 0, rotate: -180 }}
        animate={{ scale: 1, rotate: 0 }}
        exit={{ scale: 0, rotate: 180 }}
        transition={{
          type: "spring",
          stiffness: 260,
          damping: 20
        }}
        className="text-4xl font-bold"
      >
        {number}
      </motion.div>
    </AnimatePresence>
  )
}
```

## Page Transitions

### 1. Page Wrapper
```typescript
// src/components/layout/page-transition.tsx
import { motion } from 'framer-motion'

const pageVariants = {
  initial: {
    opacity: 0,
    x: -20
  },
  animate: {
    opacity: 1,
    x: 0
  },
  exit: {
    opacity: 0,
    x: 20
  }
}

export const PageTransition = ({ children }: { children: React.ReactNode }) => {
  return (
    <motion.div
      variants={pageVariants}
      initial="initial"
      animate="animate"
      exit="exit"
      transition={{ duration: 0.3 }}
    >
      {children}
    </motion.div>
  )
}
```

### 2. Route Transitions
```typescript
// src/app/layout.tsx
import { AnimatePresence } from 'framer-motion'

export default function RootLayout({
  children
}: {
  children: React.ReactNode
}) {
  return (
    <AnimatePresence mode="wait">
      {children}
    </AnimatePresence>
  )
}
```

## Interactive Animations

### 1. Bingo Card Cell
```typescript
// src/components/game/bingo-cell.tsx
import { motion } from 'framer-motion'

export const BingoCell = ({
  number,
  marked,
  onMark
}: {
  number: number
  marked: boolean
  onMark: () => void
}) => {
  return (
    <motion.button
      whileHover={{ scale: 1.05 }}
      whileTap={{ scale: 0.95 }}
      onClick={onMark}
      className={`relative p-4 rounded-lg ${
        marked ? 'bg-primary' : 'bg-card'
      }`}
    >
      <motion.span
        initial={false}
        animate={{ scale: marked ? 1 : 0 }}
        className="absolute inset-0 bg-primary/20 rounded-lg"
      />
      {number}
    </motion.button>
  )
}
```

### 2. Win Celebration
```typescript
// src/components/game/win-celebration.tsx
import { motion } from 'framer-motion'

const confettiVariants = {
  initial: { y: -100, opacity: 0 },
  animate: (i: number) => ({
    y: 0,
    opacity: 1,
    transition: {
      delay: i * 0.1,
      duration: 0.5,
      repeat: Infinity,
      repeatType: "reverse"
    }
  })
}

export const WinCelebration = () => {
  return (
    <div className="fixed inset-0 pointer-events-none">
      {Array.from({ length: 50 }).map((_, i) => (
        <motion.div
          key={i}
          custom={i}
          variants={confettiVariants}
          initial="initial"
          animate="animate"
          className="absolute w-2 h-2 bg-primary"
          style={{
            left: `${Math.random() * 100}%`,
            top: 0
          }}
        />
      ))}
    </div>
  )
}
```

## Gesture Animations

### 1. Swipe Actions
```typescript
// src/components/game/swipe-card.tsx
import { motion, useDragControls } from 'framer-motion'

export const SwipeCard = ({ children }: { children: React.ReactNode }) => {
  const dragControls = useDragControls()

  return (
    <motion.div
      drag="x"
      dragControls={dragControls}
      dragConstraints={{ left: 0, right: 0 }}
      onDragEnd={(event, info) => {
        if (Math.abs(info.offset.x) > 100) {
          // Trigger action
        }
      }}
      className="cursor-grab active:cursor-grabbing"
    >
      {children}
    </motion.div>
  )
}
```

### 2. Pull to Refresh
```typescript
// src/components/ui/pull-to-refresh.tsx
import { motion, useMotionValue, useTransform } from 'framer-motion'

export const PullToRefresh = ({
  onRefresh,
  children
}: {
  onRefresh: () => void
  children: React.ReactNode
}) => {
  const y = useMotionValue(0)
  const opacity = useTransform(y, [0, 100], [0, 1])

  return (
    <motion.div
      style={{ y }}
      drag="y"
      dragConstraints={{ top: 0, bottom: 0 }}
      onDragEnd={(event, info) => {
        if (info.offset.y > 100) {
          onRefresh()
        }
      }}
    >
      <motion.div
        style={{ opacity }}
        className="absolute top-0 left-0 right-0 h-20 flex items-center justify-center"
      >
        Pull to refresh
      </motion.div>
      {children}
    </motion.div>
  )
}
```

## Performance

### 1. Animation Optimization
```typescript
// src/hooks/use-animation.ts
import { useCallback } from 'react'
import { useAnimationControls } from 'framer-motion'

export const useAnimation = () => {
  const controls = useAnimationControls()

  const startAnimation = useCallback(async () => {
    await controls.start({
      scale: [1, 1.2, 1],
      transition: {
        duration: 0.3,
        times: [0, 0.5, 1]
      }
    })
  }, [controls])

  return { controls, startAnimation }
}
```

### 2. Lazy Loading
```typescript
// src/components/game/lazy-animation.tsx
import { lazy, Suspense } from 'react'
import { motion } from 'framer-motion'

const LazyWinCelebration = lazy(() => import('./win-celebration'))

export const LazyAnimation = () => {
  return (
    <Suspense
      fallback={
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          className="h-20"
        />
      }
    >
      <LazyWinCelebration />
    </Suspense>
  )
}
```

## Best Practices

1. **Animation Principles**
   - Keep animations subtle
   - Use appropriate timing
   - Consider user preferences
   - Maintain consistency

2. **Performance**
   - Use hardware acceleration
   - Optimize animation frames
   - Lazy load heavy animations
   - Monitor performance

3. **Accessibility**
   - Respect reduced motion
   - Provide alternatives
   - Consider epilepsy
   - Test with screen readers

4. **Mobile Considerations**
   - Optimize for touch
   - Consider battery life
   - Handle orientation
   - Test on devices

5. **Testing**
   - Test on multiple devices
   - Verify performance
   - Check accessibility
   - Monitor memory usage

## Animation Types

### 1. Micro-interactions
```typescript
// src/components/ui/micro-interaction.tsx
import { motion } from 'framer-motion'

export const MicroInteraction = () => {
  return (
    <motion.button
      whileHover={{ scale: 1.05 }}
      whileTap={{ scale: 0.95 }}
      className="p-2 rounded-full"
    >
      <motion.span
        initial={false}
        animate={{ rotate: 360 }}
        transition={{ duration: 0.5 }}
      >
        â†»
      </motion.span>
    </motion.button>
  )
}
```

### 2. Loading States
```typescript
// src/components/ui/loading.tsx
import { motion } from 'framer-motion'

export const Loading = () => {
  return (
    <div className="flex space-x-2">
      {[0, 1, 2].map((i) => (
        <motion.div
          key={i}
          animate={{
            y: [0, -10, 0]
          }}
          transition={{
            duration: 0.5,
            repeat: Infinity,
            delay: i * 0.1
          }}
          className="w-2 h-2 bg-primary rounded-full"
        />
      ))}
    </div>
  )
}
```

---

**For more details, see:**
- [Framer Motion Documentation](mdc:https:/www.framer.com/motion)
- [Animation Best Practices](mdc:https:/www.framer.com/motion/best-practices)
- [Web Animation API](mdc:https:/developer.mozilla.org/en-US/docs/Web/API/Web_Animations_API)
