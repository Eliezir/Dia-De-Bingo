---
description: 
globs: 
alwaysApply: true
---
# Edge Functions Rules

## Important: Edge Functions Management

**All edge functions are managed through the Supabase Admin Panel, not through local files.**

### 1. Accessing Edge Functions
- Go to your Supabase project dashboard
- Navigate to "Edge Functions" in the left sidebar
- All functions are created, edited, and deployed through the web interface

### 2. Function Development Workflow
1. **Create Function**: Use the "New Function" button in the admin panel
2. **Edit Function**: Click on the function name to open the code editor
3. **Test Function**: Use the "Invoke" button to test with sample data
4. **Deploy Function**: Changes are automatically saved and deployed

### 3. Local Development
- The `supabase/functions/` directory in this project is for reference only
- Functions are not deployed from local files
- Use the admin panel for all function management

## Function Structure

### 1. Basic Structure
```typescript
// Example function structure for admin panel
import { serve } from 'https://deno.land/std@0.168.0/http/server.ts'
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'

serve(async (req) => {
  try {
    // Create Supabase client
    const supabaseClient = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_ANON_KEY') ?? ''
    )

    // Handle request
    const { data, error } = await handleRequest(req, supabaseClient)
    if (error) throw error

    // Return response
    return new Response(
      JSON.stringify({ data }),
      { headers: { 'Content-Type': 'application/json' } }
    )
  } catch (error) {
    return new Response(
      JSON.stringify({ error: error.message }),
      { status: 400, headers: { 'Content-Type': 'application/json' } }
    )
  }
})
```

### 2. Request Handler
```typescript
const handleRequest = async (req: Request, supabase: SupabaseClient) => {
  // Validate request method
  if (req.method !== 'POST') {
    throw new Error('Method not allowed')
  }

  // Parse request body
  const body = await req.json()
  if (!body) {
    throw new Error('No body provided')
  }

  // Handle request based on type
  switch (body.type) {
    case 'create_room':
      return handleCreateRoom(body, supabase)
    case 'join_room':
      return handleJoinRoom(body, supabase)
    default:
      throw new Error('Invalid request type')
  }
}
```

## Function Types

### 1. Room Management
```typescript
// Example: create-room function
const handleCreateRoom = async (body: CreateRoomRequest, supabase: SupabaseClient) => {
  // Validate input
  if (!body.name) {
    throw new Error('Name is required')
  }

  // Create room
  const { data, error } = await supabase
    .from('room')
    .insert({
      name: body.name,
      code: generateRoomCode()
    })
    .select()
    .single()

  if (error) throw error
  return { data }
}
```

### 2. Game Logic
```typescript
// Example: draw-number function
const handleDrawNumber = async (body: DrawNumberRequest, supabase: SupabaseClient) => {
  // Validate room
  const { data: room } = await supabase
    .from('room')
    .select('*')
    .eq('id', body.roomId)
    .single()

  if (!room) {
    throw new Error('Room not found')
  }

  // Draw number
  const number = drawNumber(room.drawnNumbers)
  
  // Update room
  const { data, error } = await supabase
    .from('room')
    .update({
      drawnNumbers: [...room.drawnNumbers, number]
    })
    .eq('id', body.roomId)
    .select()
    .single()

  if (error) throw error
  return { data }
}
```

## Error Handling

### 1. Error Types
```typescript
class EdgeFunctionError extends Error {
  constructor(
    message: string,
    public status: number = 400,
    public code: string = 'BAD_REQUEST'
  ) {
    super(message)
  }
}

class ValidationError extends EdgeFunctionError {
  constructor(message: string) {
    super(message, 400, 'VALIDATION_ERROR')
  }
}

class NotFoundError extends EdgeFunctionError {
  constructor(message: string) {
    super(message, 404, 'NOT_FOUND')
  }
}
```

### 2. Error Handler
```typescript
const handleError = (error: Error) => {
  if (error instanceof EdgeFunctionError) {
    return new Response(
      JSON.stringify({
        error: error.message,
        code: error.code
      }),
      {
        status: error.status,
        headers: { 'Content-Type': 'application/json' }
      }
    )
  }

  return new Response(
    JSON.stringify({
      error: 'Internal server error',
      code: 'INTERNAL_ERROR'
    }),
    {
      status: 500,
      headers: { 'Content-Type': 'application/json' }
    }
  )
}
```

## Security

### 1. Authentication
```typescript
const authenticateRequest = async (req: Request, supabase: SupabaseClient) => {
  const authHeader = req.headers.get('Authorization')
  if (!authHeader) {
    throw new ValidationError('No authorization header')
  }

  const token = authHeader.replace('Bearer ', '')
  const { data: { user }, error } = await supabase.auth.getUser(token)

  if (error || !user) {
    throw new ValidationError('Invalid token')
  }

  return user
}
```

### 2. Rate Limiting
```typescript
const rateLimiter = new Map<string, number>()

const checkRateLimit = (key: string, limit: number, window: number) => {
  const now = Date.now()
  const windowStart = now - window

  // Clean old entries
  for (const [k, timestamp] of rateLimiter.entries()) {
    if (timestamp < windowStart) {
      rateLimiter.delete(k)
    }
  }

  // Check limit
  const count = Array.from(rateLimiter.values())
    .filter(timestamp => timestamp > windowStart)
    .length

  if (count >= limit) {
    throw new EdgeFunctionError('Rate limit exceeded', 429, 'RATE_LIMIT')
  }

  rateLimiter.set(key, now)
}
```

## Testing

### 1. Admin Panel Testing
- Use the "Invoke" button in the admin panel
- Test with sample request data
- Check response format and status codes
- Monitor function logs for errors

### 2. Unit Tests (Reference Only)
```typescript
// Example test structure (for reference)
import { assertEquals } from 'https://deno.land/std@0.168.0/testing/asserts.ts'
import { handleCreateRoom } from '../room/index.ts'

Deno.test('create room', async () => {
  const mockSupabase = {
    from: () => ({
      insert: () => ({
        select: () => ({
          single: () => ({
            data: { id: 1, name: 'Test Room' },
            error: null
          })
        })
      })
    })
  }

  const result = await handleCreateRoom(
    { name: 'Test Room' },
    mockSupabase as any
  )

  assertEquals(result.data.name, 'Test Room')
})
```

## Best Practices

1. **Function Organization**
   - Keep functions small and focused
   - Use clear naming conventions
   - Group related functions
   - Document function purpose

2. **Error Handling**
   - Use custom error types
   - Provide meaningful messages
   - Handle all error cases
   - Log errors appropriately

3. **Security**
   - Validate all inputs
   - Implement rate limiting
   - Use proper authentication
   - Sanitize data

4. **Performance**
   - Optimize database queries
   - Cache when appropriate
   - Handle timeouts
   - Monitor execution time

5. **Testing**
   - Test in admin panel before deployment
   - Test error cases
   - Monitor function logs
   - Use proper test data

## Deployment

### 1. Admin Panel Deployment
- Functions are automatically deployed when saved
- No manual deployment process required
- Monitor deployment status in the admin panel

### 2. Environment Variables
- Set environment variables in the admin panel
- Use the "Settings" tab for function configuration
- Access via `Deno.env.get('VARIABLE_NAME')`

### 3. Function Configuration
- Configure JWT verification in function settings
- Set rate limits through admin panel
- Monitor function usage and performance

## Current Functions

### 1. create-room
- **Purpose**: Creates a new bingo room
- **Method**: POST
- **Authentication**: Required
- **Input**: `{ name: string }`
- **Output**: `{ data: Room[], message: string }`

### 2. Future Functions (to be added)
- `join-room`: Join an existing room
- `draw-number`: Draw a number for the game
- `mark-number`: Mark a number on player's card
- `check-win`: Validate win conditions
- `end-game`: End the current game

---

**For more details, see:**
- [Supabase Edge Functions Documentation](mdc:https:/supabase.com/docs/guides/functions)
- [Deno Documentation](mdc:https:/deno.land/manual)
- [Edge Functions Best Practices](mdc:https:/supabase.com/docs/guides/functions/best-practices)
- [Supabase Admin Panel](mdc:https:/supabase.com/dashboard)
